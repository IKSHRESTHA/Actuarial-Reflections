roc_curve <- roc(test_data$personality, test_prob)
plot(roc_curve, main = "ROC Curve", col = "#1c61b6")
auc(roc_curve)
}
--------------------
# ----------------------------
# 1. Load Required Libraries
# ----------------------------
library(caret)        # For ML pipeline
library(rpart)        # Decision tree algorithm
--------------------
# ----------------------------
# 1. Load Required Libraries
# ----------------------------
library(caret)        # For ML pipeline
library(rpart)        # Decision tree algorithm
library(rpart.plot)   # Tree visualization
library(pROC)         # ROC curve analysis
library(dplyr)        # Data manipulation
# ----------------------------
# 2. Data Preparation
# ----------------------------
# Convert character variables to factors
df <- df %>%
mutate(across(where(is.character), as.factor))
# Check for missing values (critical for decision trees)
# Check for missing values (critical for decision trees)
if (sum(is.na(df)) > 0){
df <- df %>%
df <- df %>%
mutate(across(where(is.factor),~replace_na(., mode(.))))
df <- df %>%
mutate(across(where(is.factor),~replace_na(., mode(.))))
# ----------------------------
# 3. Train-Test Split (70-30)
# ----------------------------
set.seed(123)
train_index <- createDataPartition(df$personality, p = 0.7, list = FALSE)
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
# ----------------------------
# 4. Parameter Tuning (Grid Search with 10-Fold CV)
# ----------------------------
tune_control <- trainControl(
method = "cv",
number = 10,
summaryFunction = defaultSummary,
classProbs = TRUE,
savePredictions = "final"
)
tune_grid <- expand.grid(
cp = seq(0.001, 0.05, length.out = 10),  # Complexity parameter
minsplit = c(10, 20, 30),                 # Min observations to split
maxdepth = c(3, 5, 7)                     # Tree depth limits
)
# Run tuning
set.seed(123)
tuned_model <- train(
personality ~ .,
data = train_data,
method = "rpart",
trControl = tune_control,
tuneGrid = tune_grid,
metric = "Accuracy"
)
# Best parameters
print("Optimal Parameters:")
--------------------
# ----------------------------
# 1. Load Required Libraries
# ----------------------------
library(caret)        # For ML pipeline
library(rpart)        # Decision tree algorithm
--------------------
# ----------------------------
# 1. Load Required Libraries
# ----------------------------
library(caret)        # For ML pipeline
library(dplyr)
library(ggplot2)
personality_dataset <-readr::read_csv("https://raw.githubusercontent.com/IKSHRESTHA/Actuarial-Reflections/refs/heads/main/data/06272925/personality_datasert.csv")
# cleaning the columns name
df <- personality_dataset |>
janitor::clean_names()
colnames(df)
library(extrafont)  # For font consistency
install.packages("extrafont")
View(df)
library(extrafont)  # For font consistency
theme_actuarial <- function(base_size = 12,
base_family = "mono",
title_position = "middle",
border_color = "black") {
# Load monospaced font (install first if needed)
extrafont::loadfonts(quiet = TRUE)
theme_minimal(base_size = base_size, base_family = base_family) %+replace%
theme(
# Text elements
text = element_text(family = base_family, color = "black"),
title = element_text(face = "bold", size = base_size * 1.2),
plot.title = element_text(
hjust = 0.5,
margin = margin(b = base_size),
size = base_size * 1.4
),
plot.subtitle = element_text(
hjust = 0.5,
margin = margin(b = base_size)
),
plot.caption = element_text(
hjust = 1,
size = base_size * 0.8,
color = "grey40"
),
# Axis elements
axis.title = element_text(
face = "bold",
color = "black",
size = base_size * 1.1
),
axis.title.x = element_text(
margin = margin(t = base_size * 0.5),
hjust = title_position
),
axis.title.y = element_text(
margin = margin(r = base_size * 0.5),
angle = 90,
hjust = title_position
),
axis.text = element_text(color = "grey30"),
axis.line = element_line(
color = border_color,
linewidth = 0.8
),
# Panel elements
panel.grid.major = element_line(
color = "grey92",
linewidth = 0.3
),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
# Legend elements
legend.title = element_text(face = "bold"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = "white", color = NA),
# Plot elements
plot.background = element_rect(fill = "white", color = NA),
plot.margin = margin(base_size, base_size, base_size, base_size),
strip.background = element_rect(fill = "grey95", color = NA),
strip.text = element_text(face = "bold")
)
}
library(kableExtra)
install.packages("kableExtra")
library(kableExtra)
create_summary_table <- function(df) {
# Generate summary statistics
summary_stats <- df %>%
summarise(across(everything(),
list(
N_NonNA = ~sum(!is.na(.)),
N_NA = ~sum(is.na(.)),
Mean = ~ifelse(is.numeric(.), mean(., na.rm = TRUE), NA),
SD = ~ifelse(is.numeric(.), sd(., na.rm = TRUE), NA),
Min = ~ifelse(is.numeric(.), min(., na.rm = TRUE), NA),
Q1 = ~ifelse(is.numeric(.), quantile(., 0.25, na.rm = TRUE), NA),
Median = ~ifelse(is.numeric(.), median(., na.rm = TRUE), NA),
Q3 = ~ifelse(is.numeric(.), quantile(., 0.75, na.rm = TRUE), NA),
Max = ~ifelse(is.numeric(.), max(., na.rm = TRUE), NA),
Unique = ~n_distinct(., na.rm = TRUE)
))) %>%
pivot_longer(everything(),
names_to = c("Variable", ".value"),
names_sep = "_") %>%
mutate(across(where(is.numeric), ~round(., 2)))
# Create HTML table
summary_stats %>%
kable("html", escape = FALSE, align = "c") %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 14,
position = "center"
) %>%
row_spec(0, background = "#2c3e50", color = "white", bold = TRUE) %>%
column_spec(1, bold = TRUE, width = "10em") %>%
column_spec(2:3, background = "#f9f9f9") %>%
column_spec(4:10, background = "#e8f4f8") %>%
add_header_above(
c(" " = 1,
"Missing Values" = 2,
"Distribution" = 7,
" " = 1),
background = c("white", "#34495e", "#2980b9", "#27ae60"),
color = "white"
) %>%
footnote(
general = "Summary statistics for personality and social behavior variables",
general_title = "Note:",
footnote_as_chunk = TRUE
)
}
# Usage:
create_summary_table(your_data_frame)
library(tidyr)
create_summary_table <- function(df) {
# Generate summary statistics
summary_stats <- df %>%
summarise(across(everything(),
list(
N_NonNA = ~sum(!is.na(.)),
N_NA = ~sum(is.na(.)),
Mean = ~ifelse(is.numeric(.), mean(., na.rm = TRUE), NA),
SD = ~ifelse(is.numeric(.), sd(., na.rm = TRUE), NA),
Min = ~ifelse(is.numeric(.), min(., na.rm = TRUE), NA),
Q1 = ~ifelse(is.numeric(.), quantile(., 0.25, na.rm = TRUE), NA),
Median = ~ifelse(is.numeric(.), median(., na.rm = TRUE), NA),
Q3 = ~ifelse(is.numeric(.), quantile(., 0.75, na.rm = TRUE), NA),
Max = ~ifelse(is.numeric(.), max(., na.rm = TRUE), NA),
Unique = ~n_distinct(., na.rm = TRUE)
))) %>%
pivot_longer(everything(),
names_to = c("Variable", ".value"),
names_sep = "_") %>%
mutate(across(where(is.numeric), ~round(., 2)))
# Create HTML table
summary_stats %>%
kable("html", escape = FALSE, align = "c") %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
font_size = 14,
position = "center"
) %>%
row_spec(0, background = "#2c3e50", color = "white", bold = TRUE) %>%
column_spec(1, bold = TRUE, width = "10em") %>%
column_spec(2:3, background = "#f9f9f9") %>%
column_spec(4:10, background = "#e8f4f8") %>%
add_header_above(
c(" " = 1,
"Missing Values" = 2,
"Distribution" = 7,
" " = 1),
background = c("white", "#34495e", "#2980b9", "#27ae60"),
color = "white"
) %>%
footnote(
general = "Summary statistics for personality and social behavior variables",
general_title = "Note:",
footnote_as_chunk = TRUE
)
}
# Usage:
create_summary_table(your_data_frame)
# Usage:
create_summary_table(df)
create_summary_table <- function(df) {
# Generate summary statistics
summary_stats <- df %>%
summarise(across(everything(),
list(
N_NonNA = ~sum(!is.na(.)),
N_NA = ~sum(is.na(.)),
Mean = ~ifelse(is.numeric(.), mean(., na.rm = TRUE), NA),
SD = ~ifelse(is.numeric(.), sd(., na.rm = TRUE), NA),
Min = ~ifelse(is.numeric(.), min(., na.rm = TRUE), NA),
Q1 = ~ifelse(is.numeric(.), quantile(., 0.25, na.rm = TRUE), NA),
Median = ~ifelse(is.numeric(.), median(., na.rm = TRUE), NA),
Q3 = ~ifelse(is.numeric(.), quantile(., 0.75, na.rm = TRUE), NA),
Max = ~ifelse(is.numeric(.), max(., na.rm = TRUE), NA),
Unique = ~n_distinct(., na.rm = TRUE)
))) %>%
pivot_longer(everything(),
names_to = c("Variable", ".value"),
names_sep = "_") %>%
mutate(across(where(is.numeric), ~round(., 2)))
}
# Usage:
create_summary_table(df)
describe(df)
install.packages("rstatix")
install.packages("rstatix")
rstatix::get_summary_stats(df,type="full")
df_summary=rstatix::get_summary_stats(df,type="full")
df_summary
df_summary
df_summary
library(gt)
install.packages("gt")
library(gt)
library(gt)
library(DT)
install.packages("DT")
library(DT)
df_summary=rstatix::get_summary_stats(df,type="full")
# Create the HTML table
datatable(
df_summary,
rownames = FALSE,
colnames = c("Variable", "N", "Min", "Max", "Median", "Q1", "Q3", "IQR", "MAD", "Mean", "SD", "SE", "95% CI"),
caption = htmltools::tags$caption(
style = "caption-side: top; text-align: center; font-size: 1.5em;",
"Social Behavior Metrics Summary"
),
options = list(
dom = "t",
pageLength = nrow(df_summary),
columnDefs = list(
list(targets = "_all", className = "dt-center"),
list(targets = 0, className = "dt-left")
),
initComplete = JS(
"function(settings, json) {",
"  $(this.api().table().header()).css({
'background-color': '#2c3e50',
'color': 'white',
'font-family': 'monospace',
'font-weight': 'bold'
});",
"}"
)
)
) %>%
formatRound(columns = c(3:13), digits = 2) %>%
formatStyle(
columns = c("min", "max"),
backgroundColor = "#e9f7ef"
) %>%
formatStyle(
columns = c("median", "q1", "q3", "iqr", "mad"),
backgroundColor = "#fef5e7"
) %>%
formatStyle(
columns = c("mean", "sd", "se", "ci"),
backgroundColor = "#e8f4f8"
) %>%
formatStyle(
columns = names(df_summary),
fontFamily = "monospace"
) %>%
formatStyle(
"variable",
fontWeight = "bold"
)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
#| echo: false
#| message: false
#| warning: false
#| paged-print: false
library(dplyr)
library(ggplot2)
personality_dataset <-readr::read_csv("https://raw.githubusercontent.com/IKSHRESTHA/Actuarial-Reflections/refs/heads/main/data/06272925/personality_datasert.csv")
# cleaning the columns name
df <- personality_dataset |>
janitor::clean_names()
colnames(df)
library(extrafont)  # For font consistency
theme_actuarial <- function(base_size = 12,
base_family = "mono",
title_position = "middle",
border_color = "black") {
# Load monospaced font (install first if needed)
extrafont::loadfonts(quiet = TRUE)
theme_minimal(base_size = base_size, base_family = base_family) %+replace%
theme(
# Text elements
text = element_text(family = base_family, color = "black"),
title = element_text(face = "bold", size = base_size * 1.2),
plot.title = element_text(
hjust = 0.5,
margin = margin(b = base_size),
size = base_size * 1.4
),
plot.subtitle = element_text(
hjust = 0.5,
margin = margin(b = base_size)
),
plot.caption = element_text(
hjust = 1,
size = base_size * 0.8,
color = "grey40"
),
# Axis elements
axis.title = element_text(
face = "bold",
color = "black",
size = base_size * 1.1
),
axis.title.x = element_text(
margin = margin(t = base_size * 0.5),
hjust = title_position
),
axis.title.y = element_text(
margin = margin(r = base_size * 0.5),
angle = 90,
hjust = title_position
),
axis.text = element_text(color = "grey30"),
axis.line = element_line(
color = border_color,
linewidth = 0.8
),
# Panel elements
panel.grid.major = element_line(
color = "grey92",
linewidth = 0.3
),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_blank(),
# Legend elements
legend.title = element_text(face = "bold"),
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = "white", color = NA),
# Plot elements
plot.background = element_rect(fill = "white", color = NA),
plot.margin = margin(base_size, base_size, base_size, base_size),
strip.background = element_rect(fill = "grey95", color = NA),
strip.text = element_text(face = "bold")
)
}
library(DT)
df_summary=rstatix::get_summary_stats(df,type="full")
# Create the HTML table
datatable(
df_summary,
rownames = FALSE,
colnames = c("Variable", "N", "Min", "Max", "Median", "Q1", "Q3", "IQR", "MAD", "Mean", "SD", "SE", "95% CI"),
caption = htmltools::tags$caption(
style = "caption-side: top; text-align: center; font-size: 1.5em;",
"Social Behavior Metrics Summary"
),
options = list(
dom = "t",
pageLength = nrow(df_summary),
columnDefs = list(
list(targets = "_all", className = "dt-center"),
list(targets = 0, className = "dt-left")
),
initComplete = JS(
"function(settings, json) {",
"  $(this.api().table().header()).css({
'background-color': '#2c3e50',
'color': 'white',
'font-family': 'monospace',
'font-weight': 'bold'
});",
"}"
)
)
) %>%
formatRound(columns = c(3:13), digits = 2) %>%
formatStyle(
columns = c("min", "max"),
backgroundColor = "#e9f7ef"
) %>%
formatStyle(
columns = c("median", "q1", "q3", "iqr", "mad"),
backgroundColor = "#fef5e7"
) %>%
formatStyle(
columns = c("mean", "sd", "se", "ci"),
backgroundColor = "#e8f4f8"
) %>%
formatStyle(
columns = names(df_summary),
fontFamily = "monospace"
) %>%
formatStyle(
"variable",
fontWeight = "bold"
)
# Create the HTML table
DT::datatable(df_summary)
install.packages("rvest")
df_summary=rstatix::get_summary_stats(df,type="full")
rvest::html_table(df_summary)
df_summary=rstatix::get_summary_stats(df,type="full")
kableExtra::kable(df_summary)
df_summary=rstatix::get_summary_stats(df,type="full")
kableExtra::kable(df_summary)%>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE, position = "center") %>%
row_spec(0, background = "#2c3e50", color = "white", bold = TRUE) %>%
column_spec(1, bold = TRUE)
library(kableExtra)
kableExtra::kable(df_summary)%>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE, position = "center") %>%
row_spec(0, background = "#2c3e50", color = "white", bold = TRUE) %>%
column_spec(1, bold = TRUE)
kable(df_summary)
renv::status()
install.packages("rmarkdown")
install.packages("rmarkdown")
renv::snapshot()
renv::install("Matrix")  # Installs latest version
renv::restore()
# Install packages requiring system dependencies
renv::install(c("nloptr", "clipr", "knitr"))
# Capture the updated dependencies
renv::snapshot()
# Install latest Matrix version from CRAN
renv::install("Matrix")
r
packageVersion("Matrix")
renv::status()
?renv::status
renv::clean()
renv::snapshot()
renv::status()
