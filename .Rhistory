renv::init()             # if you have not used renv before in this project
renv::snapshot()
install.packages("yaml")
renv::init()             # if you have not used renv before in this project
library(readr)
install.packages("readr")
renv::snapshot()
library("readr")
personality_dataset <- read_csv("https://raw.githubusercontent.com/IKSHRESTHA/Actuarial-Reflections/refs/heads/main/data/06272925/personality_datasert.csv")
library(tidyr)
install.packages("tidyverse")
install.packages("janitor")
df <- personality_dataset |>
janitor::clean_names()
colnames(df)
summary(df)
table(df$personality)
library(dplyr)
stage_fear = df  %>%
group_by(stage_fear)%>%
summarise(count = n()) %>%
ungroup()
stage_fear
stage_fear = df  %>%
group_by(personality,stage_fear)%>%
summarise(count = n()) %>%
ungroup()
stage_fear
)
# Create a stacked bar plot with percentages
ggplot(stage_fear, aes(x = personality, y = count, fill = stage_fear)) +
# Create a stacked bar plot with percentages
ggplot(stage_fear, aes(x = personality, y = count, fill = stage_fear)) +
geom_bar(stat = "identity", position = "fill", width = 0.7) +
geom_text(aes(label = paste0(round(count/sum(count)*100, 1), "%"),
position = position_fill(vjust = 0.5),
size = 5, color = "white", fontface = "bold") +
scale_fill_manual(values = c("No" = "#4E79A7", "Yes" = "#F28E2B"),
name = "Stage Fear") +
scale_y_continuous(labels = percent_format()) +
labs(title = "Stage Fear Distribution by Personality Type",
subtitle = "Introverts show significantly higher stage fear than extroverts",
x = "Personality Type",
y = "Percentage",
caption = "Data shows clear relationship between personality and stage fear") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray40"),
legend.position = "top",
panel.grid.major.x = element_blank(),
axis.text = element_text(color = "black"),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA)
))
library(ggplot2)
library(scales)
# Create a stacked bar plot with percentages
ggplot(stage_fear, aes(x = personality, y = count, fill = stage_fear)) +
geom_bar(stat = "identity", position = "fill", width = 0.7) +
geom_text(aes(label = paste0(round(count/sum(count)*100, 1), "%"),
position = position_fill(vjust = 0.5),
size = 5, color = "white", fontface = "bold") +
scale_fill_manual(values = c("No" = "#4E79A7", "Yes" = "#F28E2B"),
name = "Stage Fear") +
scale_y_continuous(labels = percent_format()) +
labs(title = "Stage Fear Distribution by Personality Type",
subtitle = "Introverts show significantly higher stage fear than extroverts",
x = "Personality Type",
y = "Percentage",
caption = "Data shows clear relationship between personality and stage fear") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray40"),
legend.position = "top",
panel.grid.major.x = element_blank(),
axis.text = element_text(color = "black"),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA)
))
)
# Now create the plot
ggplot(stage_fear_perc, aes(x = personality, y = count, fill = stage_fear)) +
geom_bar(stat = "identity", position = "fill", width = 0.7) +
geom_text(aes(label = paste0(round(percentage, 1), "%"),
position = position_fill(vjust = 0.5),
size = 5, color = "white", fontface = "bold") +
scale_fill_manual(values = c("No" = "#4E79A7", "Yes" = "#F28E2B"),
name = "Stage Fear") +
scale_y_continuous(labels = percent_format()) +
labs(title = "Stage Fear Distribution by Personality Type",
subtitle = "Introverts show significantly higher stage fear than extroverts",
x = "Personality Type",
y = "Percentage",
caption = paste("Total observations:",
sum(stage_fear$count),
"| Extroverts:", stage_fear$count[1] + stage_fear$count[2],
"| Introverts:", stage_fear$count[3] + stage_fear$count[4])) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray40"),
legend.position = "top",
panel.grid.major.x = element_blank(),
axis.text = element_text(color = "black"),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA)
))
# First, let's calculate percentages properly within each personality group
stage_fear_perc <- stage_fear %>%
group_by(personality) %>%
mutate(percentage = count / sum(count) * 100) %>%
ungroup()
# Now create the plot
ggplot(stage_fear_perc, aes(x = personality, y = count, fill = stage_fear)) +
geom_bar(stat = "identity", position = "fill", width = 0.7) +
geom_text(aes(label = paste0(round(percentage, 1), "%"),
position = position_fill(vjust = 0.5),
size = 5, color = "white", fontface = "bold") +
scale_fill_manual(values = c("No" = "#4E79A7", "Yes" = "#F28E2B"),
name = "Stage Fear") +
scale_y_continuous(labels = percent_format()) +
labs(title = "Stage Fear Distribution by Personality Type",
subtitle = "Introverts show significantly higher stage fear than extroverts",
x = "Personality Type",
y = "Percentage",
caption = paste("Total observations:",
sum(stage_fear$count),
"| Extroverts:", stage_fear$count[1] + stage_fear$count[2],
"| Introverts:", stage_fear$count[3] + stage_fear$count[4])) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray40"),
legend.position = "top",
panel.grid.major.x = element_blank(),
axis.text = element_text(color = "black"),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA)
))
# Now create the plot
ggplot(stage_fear_perc, aes(x = personality, y = count, fill = stage_fear)) +
geom_bar(stat = "identity", position = "fill", width = 0.7) +
geom_text(aes(label = paste0(round(percentage, 1), "%"),
# position = position_fill(vjust = 0.5),
size = 5, color = "white", fontface = "bold") +
scale_fill_manual(values = c("No" = "#4E79A7", "Yes" = "#F28E2B"),
name = "Stage Fear") +
scale_y_continuous(labels = percent_format()) +
labs(title = "Stage Fear Distribution by Personality Type",
subtitle = "Introverts show significantly higher stage fear than extroverts",
x = "Personality Type",
y = "Percentage",
caption = paste("Total observations:",
sum(stage_fear$count),
"| Extroverts:", stage_fear$count[1] + stage_fear$count[2],
"| Introverts:", stage_fear$count[3] + stage_fear$count[4])) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray40"),
legend.position = "top",
panel.grid.major.x = element_blank(),
axis.text = element_text(color = "black"),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA)
))
# Now create the plot
ggplot(stage_fear_perc, aes(x = personality, y = count, fill = stage_fear)) +
geom_bar(stat = "identity", position = "fill", width = 0.7) +
scale_y_continuous(labels = percent_format()) +
labs(title = "Stage Fear Distribution by Personality Type",
subtitle = "Introverts show significantly higher stage fear than extroverts",
x = "Personality Type",
y = "Percentage",
caption = paste("Total observations:",
sum(stage_fear$count),
"| Extroverts:", stage_fear$count[1] + stage_fear$count[2],
"| Introverts:", stage_fear$count[3] + stage_fear$count[4])) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray40"),
legend.position = "top",
panel.grid.major.x = element_blank(),
axis.text = element_text(color = "black"),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA)
))
# Simple bar plot (dodged bars)
ggplot(stage_fear, aes(x = personality, y = count, fill = stage_fear)) +
geom_col(position = "dodge") +  # Use "dodge" for side-by-side bars
geom_text(
aes(label = count),
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 4
) +
scale_fill_manual(
values = c("Yes" = "#ff6b6b", "No" = "#74b9ff"),  # Red/Blue colors
name = "Stage Fear?"
) +
labs(
title = "Stage Fear by Personality Type",
x = "Personality",
y = "Count"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "top"
)
colSums(is.na(df))
head(df)
summary(df)
# Load required libraries
library(caret)       # For data splitting and model evaluation
install.packages("caret")
install.packages("rpart")
install.packages("rpart.plot")
# Load required libraries
library(caret)       # For data splitting and model evaluation
library(rpart)       # For decision tree
library(rpart.plot)  # For visualizing the tree
library(dplyr)       # For data manipulation
# 1. Data Preparation
# Convert character variables to factors (required for classification)
df <- df %>%
mutate(across(where(is.character), as.factor))
# 2. Train-Test Split (70% train, 30% test)
set.seed(123) # For reproducibility
train_index <- createDataPartition(df$personality, p = 0.7, list = FALSE)
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
# 3. Build Decision Tree Model
tree_model <- rpart(
personality ~ .,
data = train_data,
method = "class",
control = rpart.control(
minsplit = 20,    # Minimum number of obs to split
cp = 0.01,        # Complexity parameter
maxdepth = 5      # Maximum depth of tree
)
)
# 4. Visualize the Decision Tree
rpart.plot(tree_model,
box.palette = "BuRd", # Color scheme
shadow.col = "gray",  # Shadow under node boxes
nn = TRUE)           # Show node numbers
# Predict on training data (to check for overfitting)
train_pred <- predict(tree_model, train_data, type = "class")
train_confusion <- confusionMatrix(train_pred, train_data$personality)
print("Training Set Performance:")
print(train_confusion)
# Predict on test data
test_pred <- predict(tree_model, test_data, type = "class")
test_confusion <- confusionMatrix(test_pred, test_data$personality)
print("Test Set Performance:")
print(test_confusion)
# 6. Additional Metrics
# Variable Importance
importance <- varImp(tree_model)
print("Variable Importance:")
print(importance)
# Classification Error Rate
test_error <- 1 - test_confusion$overall["Accuracy"]
print(paste("Test Error Rate:", round(test_error, 4)))
# 7. ROC Curve (for binary classification)
if(length(levels(df$personality)) == 2) {
library(pROC)
test_prob <- predict(tree_model, test_data, type = "prob")[,2]
roc_curve <- roc(test_data$personality, test_prob)
plot(roc_curve, main = "ROC Curve", col = "#1c61b6")
auc(roc_curve)
}
--------------------
# ----------------------------
# 1. Load Required Libraries
# ----------------------------
library(caret)        # For ML pipeline
library(rpart)        # Decision tree algorithm
--------------------
# ----------------------------
# 1. Load Required Libraries
# ----------------------------
library(caret)        # For ML pipeline
library(rpart)        # Decision tree algorithm
library(rpart.plot)   # Tree visualization
library(pROC)         # ROC curve analysis
library(dplyr)        # Data manipulation
# ----------------------------
# 2. Data Preparation
# ----------------------------
# Convert character variables to factors
df <- df %>%
mutate(across(where(is.character), as.factor))
# Check for missing values (critical for decision trees)
# Check for missing values (critical for decision trees)
if (sum(is.na(df)) > 0){
df <- df %>%
df <- df %>%
mutate(across(where(is.factor),~replace_na(., mode(.))))
df <- df %>%
mutate(across(where(is.factor),~replace_na(., mode(.))))
# ----------------------------
# 3. Train-Test Split (70-30)
# ----------------------------
set.seed(123)
train_index <- createDataPartition(df$personality, p = 0.7, list = FALSE)
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
# ----------------------------
# 4. Parameter Tuning (Grid Search with 10-Fold CV)
# ----------------------------
tune_control <- trainControl(
method = "cv",
number = 10,
summaryFunction = defaultSummary,
classProbs = TRUE,
savePredictions = "final"
)
tune_grid <- expand.grid(
cp = seq(0.001, 0.05, length.out = 10),  # Complexity parameter
minsplit = c(10, 20, 30),                 # Min observations to split
maxdepth = c(3, 5, 7)                     # Tree depth limits
)
# Run tuning
set.seed(123)
tuned_model <- train(
personality ~ .,
data = train_data,
method = "rpart",
trControl = tune_control,
tuneGrid = tune_grid,
metric = "Accuracy"
)
# Best parameters
print("Optimal Parameters:")
--------------------
# ----------------------------
# 1. Load Required Libraries
# ----------------------------
library(caret)        # For ML pipeline
library(rpart)        # Decision tree algorithm
--------------------
# ----------------------------
# 1. Load Required Libraries
# ----------------------------
library(caret)        # For ML pipeline
